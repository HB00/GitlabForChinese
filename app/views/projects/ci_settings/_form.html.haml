%h3.page-title
  CI 设置
%hr
.bs-callout.help-callout
  %p
    如果你需要测试你的 .gitlab-ci.yml 文件，你可以使用专用工具 - #{link_to "Lint", ci_lint_path}
  %p
    使用 web 编辑器直接编辑
    #{link_to ".gitlab-ci.yml", yaml_web_editor_link(@ci_project)}

- unless @project.empty_repo?
  %p
    复制粘贴下面的链接可以显示 #{@repository.root_ref} 的构建状态图
    = link_to '#', class: 'badge-codes-toggle btn btn-default btn-xs' do
      状态徽章
    .badge-codes-block.bs-callout.bs-callout-info.hide
      %p
        %span.label.label-info #{@repository.root_ref}
        分支的状态徽章
      %div
        %label Markdown:
        = text_field_tag 'badge_md', markdown_badge_code(@ci_project, @repository.root_ref), readonly: true, class: 'form-control'
        %label Html:
        = text_field_tag 'badge_html', html_badge_code(@ci_project, @repository.root_ref), readonly: true, class: 'form-control'

= nested_form_for @ci_project, url: namespace_project_ci_settings_path(@project.namespace, @project), html: { class: 'form-horizontal' } do |f|
  - if @ci_project.errors.any?
    #error_explanation
      %p.lead= "发生 #{pluralize(@ci_project.errors.count, "个错误", "个错误")}阻止此项目保存："
      .alert.alert-error
        %ul
          - @ci_project.errors.full_messages.each do |msg|
            %li= msg

  %fieldset
    %legend 构建设置
    .form-group
      = label_tag nil, class: 'control-label' do
        获取代码
      .col-sm-10
        %p 使用下面的命令来获取程序代码：
        .radio
          = label_tag do
            = f.radio_button :allow_git_fetch, 'false'
            %strong git clone
            .light 比较慢，但可以在每次构建前保证你有一个干净的文件目录
        .radio
          = label_tag do
            = f.radio_button :allow_git_fetch, 'true'
            %strong git fetch
            .light 比较快
    .form-group
      = f.label :timeout_in_minutes, '超时', class: 'control-label'
      .col-sm-10
        = f.number_field :timeout_in_minutes, class: 'form-control', min: '0'
        .light 每次构建时间的最大分钟数


  %fieldset
    %legend 构建计划
    .form-group
      = f.label :always_build, '计划构建', class: 'control-label'
      .col-sm-10
        .checkbox
          = f.label :always_build do
            = f.check_box :always_build
            %span.light 如果没有构建将过 X 小时后重复最后的构建
    .form-group
      = f.label :polling_interval, "构建间隔", class: 'control-label'
      .col-sm-10
        = f.number_field :polling_interval, placeholder: '5', min: '0', class: 'form-control'
        .light 小时数

  %fieldset
    %legend 项目设置
    .form-group
      = f.label :default_ref, "显示下列分支为选项卡", class: 'control-label'
      .col-sm-10
        = f.text_field :default_ref, class: 'form-control', placeholder: 'master, stable'
        .light 你可以直接过滤这些分支的构建
    .form-group
      = f.label :public, '公开模式', class: 'control-label'
      .col-sm-10
        .checkbox
          = f.label :public do
            = f.check_box :public
            %span.light 任何人都可以看到项目和构建
    .form-group
      = f.label :coverage_regex, "测试覆盖解析", class: 'control-label'
      .col-sm-10
        .input-group
          %span.input-group-addon /
          = f.text_field :coverage_regex, class: 'form-control', placeholder: '\(\d+.\d+\%\) covered'
          %span.input-group-addon /
        .light 我们将使用此正则表达式在构建信息中查找测试覆盖输出。如果不想使用此功能，请留空。
        .bs-callout.bs-callout-info
          %p 下面是现有工具的正则表达式例子：
          %ul
            %li
              Simplecov (Ruby) -
              %code \(\d+.\d+\%\) covered
            %li
              pytest-cov (Python) -
              %code \d+\%$



  %fieldset
    %legend 高级设置
    .form-group
      = f.label :token, "CI 授权", class: 'control-label'
      .col-sm-10
        = f.text_field :token, class: 'form-control', placeholder: 'xEeFCaDAB89'

  .form-actions
    = f.submit '保存修改', class: 'btn btn-save'
    - unless @ci_project.new_record?
      = link_to '删除项目', ci_project_path(@ci_project), method: :delete, data: { confirm: '确定要删除项目么？' }, class: 'btn btn-danger pull-right'
